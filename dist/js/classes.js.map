{"version":3,"sources":["classes.js"],"names":["Ball","scene","x","y","texture","matter","world","id","body","label","setupBall","update","setCollisions","isOnRamp","isOnCenterRamp","friction","frictionAir","inertia","Infinity","setDensity","setDepth","setCollisionCategory","collisionGroupA","balls","push","sys","displayList","add","level","setCollidesWith","collisionGroupB","sensorGroupA","collisionGroupC","collisionGroupE","sensorGroupB","collisionGroupD","i","setInterval","destroy","clearInterval","Phaser","Physics","Matter","Image","StaticShape","type","width","height","rotation","collisionGroup","drawShape","object","image","setExistingBody","setVisible","rectangle","isStatic","angle","circle","alert","StaticCustomShape","name","Bodies","fromVertices","PATHS","restitution","setStatic","Bumper","setCircle","setScale","mass","canAnimate","position","startPosition","targetX","targetY","tweens","targets","yoyo","duration","repeat","setTimeout","Sensor","isSensor"],"mappings":"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","sourcesContent":["class Ball extends Phaser.Physics.Matter.Image {\n    constructor(scene, x, y, texture) {\n        super(scene.matter.world, x, y, texture)\n        super.setScale(.8) \n        super.setCircle(8.75)\n        this.id = this.body.id\n        this.scene = scene\n        this.body.label = 'Ball'\n        this.setupBall()\n        this.update()\n    }\n    setupBall(){\n        this.setCollisions('table')\n        this.body.isOnRamp = false\n        this.body.isOnCenterRamp = false\n        this.body.friction = 0\n        this.body.frictionAir = 0\n        this.body.inertia = Infinity\n        this.setDensity(.001)\n        this.setDepth(1)\n        this.setCollisionCategory(collisionGroupA)\n        balls.push(this.body)\n        this.scene.sys.displayList.add(this)\n    }\n    setCollisions(level){ \n        //Changes what the ball can collide with depending on where it is\n        if ( level === 'table' ){\n            this.setCollidesWith([collisionGroupA, collisionGroupB, sensorGroupA])\n        } else if ( level === 'ramps' ){\n            this.setCollidesWith([collisionGroupA, collisionGroupC, collisionGroupE, sensorGroupB])\n        } else if ( level === 'centerRamp' ){\n            this.setCollidesWith([collisionGroupA, collisionGroupC, collisionGroupD, sensorGroupB])\n        }\n    }\n    launch(){\n        super.setVelocityY(-20.5)\n    }\n    update(){\n        let i = setInterval(()=>{\n            //Check if the ball is on a ramp\n            if (this.body.isOnRamp && this.body.isOnCenterRamp){\n                this.setCollisions('centerRamp')\n                this.setDepth(3)\n                //Increase gravity (density) by 20% if ball is on ramp \n                // this.setDensity(0.00108)\n            } else if (this.body.isOnRamp){\n                this.setCollisions('ramps')\n            } else if (!this.body.isOnRamp){\n                this.setCollisions('table')\n                this.setDepth(1)\n            } \n            //Check if the ball is in killzone\n            if (this.y > 720){\n                this.destroy()\n                clearInterval(i)\n            }\n        }, 16.66666)\n    }\n}\n\nclass StaticShape {\n    constructor(scene, type, x, y, width, height, rotation, collisionGroup){\n        this.body = {}\n        this.scene = scene\n        this.type = type\n        this.x = x\n        this.y = y\n        this.width = width\n        this.height = height\n        this.rotation = rotation\n        this.drawShape()\n        //this.body.collisionFilter.category = collisionGroup\n        this.object = this.scene.matter.add.image(this.x, this.y, null).setExistingBody(this.body).setVisible(false)\n        this.object.setCollisionCategory(collisionGroup)\n    }\n    drawShape(){\n        if (this.type === 'rectangle'){\n            this.body = this.scene.matter.add.rectangle(this.x, this.y, this.width, this.height, {\n                isStatic: true,\n                angle: this.rotation\n            })\n        } else if (this.type === 'circle'){\n            this.body = this.scene.matter.add.circle(this.x, this.y, this.width, {\n                isStatic: true\n            })\n        } else {\n            alert `${this.type} is not a supported shape`\n        }\n    }\n}\n\nclass StaticCustomShape extends Phaser.Physics.Matter.Image {\n    constructor(scene, x, y, name, collisionGroup){\n        super(scene.matter.world, x, y, name)\n        this.setExistingBody(Bodies.fromVertices(0,0, PATHS[`${name}`]))\n        this.body.restitution = 0\n        this.setVisible(false)\n        this.setStatic(true)\n        this.x = x\n        this.y = y\n        this.setCollisionCategory(collisionGroup)\n    }\n}\n\nclass Bumper extends Phaser.Physics.Matter.Image {\n    constructor(scene, x, y, name){\n        super(scene.matter.world, x, y, name)\n        this.setCircle(24)\n        this.setStatic(true)\n        this.setScale(0.75)\n        this.body.mass = .999\n        this.x = x\n        this.y = y\n        this.body.label = name\n        this.scene = scene\n        this.body.restitution = 1\n        this.setCollisionCategory(collisionGroupB)\n        this.canAnimate = true\n    }\n    fire(position){\n        //Grab the starting position\n        if (this.canAnimate) {\n\n            this.canAnimate = false\n\n            let startPosition = {\n                x: this.x,\n                y: this.y\n            }\n            //Calculate the midpoint between the ball and bumper\n            let targetX = (this.x + position.x) / 2\n            let targetY = (this.y + position.y) / 2\n\n    \n            //Tween to that point\n            this.scene.tweens.add({\n                targets: this,\n                x: targetX,\n                y: targetY,\n                yoyo: true,\n                duration: 20,\n                repeat: 0\n            })\n\n            setTimeout(()=>{\n                this.x = startPosition.x\n                this.y = startPosition.y\n                setTimeout(()=>{\n                    this.canAnimate = true\n                }, 100)\n            }, 40)\n\n            \n\n\n        }\n    }\n}\n\nclass Sensor extends StaticShape {\n    constructor(scene, x, y, width, rotation, type, name, collisionGroup){\n        super(scene, 'rectangle', x, y, width, 20, rotation, collisionGroup)\n        this.body.isSensor = true\n        this.body.type = type\n        this.body.label = name\n    }\n}"],"file":"classes.js"}