{"version":3,"sources":["game.js"],"names":["config","type","Phaser","CANVAS","width","height","physics","default","matter","debug","gravity","x","y","scene","preload","create","update","Bodies","Physics","Matter","balls","spacebar","left","right","shift","ball","bounds","leftFlipper","rightFlipper","sideFlipper","testShape","bumperA","bumperB","bumperC","playfield","plastics","table","ramps","characters","collisionGroupA","collisionGroupB","collisionGroupC","collisionGroupD","collisionGroupE","sensorGroupA","sensorGroupB","leftRampDivert","leftRampDiverter","leftRampBottom","flipperCollisionGroup","test","tween","testFlipper","game","Game","load","image","world","nextCategory","setBounds","input","keyboard","addKey","Input","Keyboard","KeyCodes","LEFT","SHIFT","RIGHT","SPACE","on","pointer","Ball","console","log","vertices","value","push","add","setDepth","LeftFlipper","RightFlipper","SideFlipper","StaticCustomShape","setScale","Sensor","event","bodyA","bodyB","label","isSensor","isOnRamp","setTimeout","slingshotA","fire","slingshotB","canCallA","canCallB","canCallC","position","hold","JustDown","launch","flip","isFlipping","JustUp","release"],"mappings":"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","sourcesContent":["\r\n//Initial config\r\n\r\nconst config = {\r\n    type: Phaser.CANVAS,\r\n    width: 520,\r\n    height: 800,\r\n    physics: {\r\n        default: 'matter',\r\n        matter: {\r\n            debug: true,\r\n            gravity: {\r\n                x: 0,\r\n                y: .9\r\n            }\r\n        }\r\n    },\r\n    scene: {\r\n        preload: preload, \r\n        create: create,\r\n        update: update \r\n    }\r\n}\r\n\r\n//Declare global variables \r\n\r\nconst Bodies = Phaser.Physics.Matter.Matter.Bodies\r\n\r\nlet balls = []\r\n\r\nlet \r\n    spacebar, \r\n    left,\r\n    right,\r\n    shift,\r\n    ball, \r\n    bounds, \r\n    leftFlipper, \r\n    rightFlipper, \r\n    sideFlipper,\r\n    testShape,\r\n    bumperA, bumperB, bumperC,\r\n\r\n    //Background\r\n    playfield,\r\n    plastics,\r\n    table,\r\n    ramps,\r\n    characters,\r\n\r\n    //Utilities\r\n    collisionGroupA, collisionGroupB, collisionGroupC, collisionGroupD, collisionGroupE,\r\n    sensorGroupA, sensorGroupB,\r\n    leftRampDivert, // Default: false\r\n    leftRampDiverter, \r\n    leftRampBottom,\r\n    flipperCollisionGroup,\r\n    test,\r\n    tween,\r\n    testFlipper\r\n    \r\nconst game = new Phaser.Game(config)\r\n\r\n//Load assets\r\n\r\nfunction preload() {\r\n    \r\n    this.load.image('rectA', 'dist/assets/solids/grey-solid.svg')\r\n    this.load.image('schematic', 'dist/assets/schematic.jpg')\r\n    this.load.image('blueprint', 'dist/assets/blueprint.png')\r\n    this.load.image('plastics', 'dist/assets/Plasticos.png')\r\n    this.load.image('playfield', 'dist/assets/Playfield.png')\r\n    this.load.image('render', 'dist/assets/render.png')\r\n    this.load.image('characters', 'dist/assets/table/characters.png')\r\n    this.load.image('ramps', 'dist/assets/table/ramps.png')\r\n    this.load.image('table', 'dist/assets/table/table.png')\r\n    this.load.image('ball', 'dist/assets/table/ball.png')\r\n}\r\n\r\n//Initialize table\r\n\r\nfunction create() {\r\n\r\n    //Set some things up, inputs, collisiongroups, etc. \r\n    sensorGroupA = this.matter.world.nextCategory() // Ground level sensors\r\n    sensorGroupB = this.matter.world.nextCategory() // Upper level sensors\r\n    collisionGroupA = this.matter.world.nextCategory() // Ball\r\n    collisionGroupB = this.matter.world.nextCategory() // Walls\r\n    collisionGroupC = this.matter.world.nextCategory()\r\n    collisionGroupD = this.matter.world.nextCategory()\r\n    collisionGroupE = this.matter.world.nextCategory()\r\n    flipperCollisionGroup = this.matter.world.nextCategory()\r\n    leftRampDivert = false\r\n\r\n    test = this\r\n    bounds = this.matter.world.setBounds(0, 0, 520, 800, 30, true, true, true, true)\r\n    left = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.LEFT)\r\n    shift = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SHIFT)\r\n    right = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.RIGHT)\r\n    spacebar = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE)\r\n    \r\n\r\n    //Utility functions\r\n\r\n    //Add a ball where you click\r\n    this.input.on('pointerdown', function(pointer){\r\n        ball = new Ball(this, pointer.x, pointer.y, 'ball') \r\n        console.log(pointer.x, ',', pointer.y)\r\n    }, this)\r\n\r\n    //Creates paths used to draw physics shapes. \r\n    let vertices = []\r\n    this.input.on('pointerdown', function(pointer){\r\n        let value = {\r\n            x: pointer.x,\r\n            y: pointer.y\r\n        }\r\n        vertices.push(value)\r\n        console.log(vertices)\r\n    }, this)\r\n    \r\n\r\n    \r\n    //Layout overlay\r\n    //let blueprint = this.add.image(260,400, 'blueprint')\r\n    \r\n    // playfield = this.add.image(260, 390, 'render')\r\n    // playfield.setScale(1)\r\n    // playfield.setDepth(1)\r\n\r\n    table = this.add.image(260, 400, 'table')\r\n    table.setDepth(1)\r\n    ramps = this.add.image(260, 400, 'ramps')\r\n    ramps.setDepth(2)\r\n    characters = this.add.image(260, 400, 'characters')\r\n    characters.setDepth(4)\r\n    \r\n    // plastics = this.add.image(220, 445, 'plastics')\r\n    // plastics.setScale(0.21)\r\n    // plastics.setDepth(1)\r\n    \r\n    //Flippers\r\n    leftFlipper = new LeftFlipper(this, 147, 634) \r\n    rightFlipper = new RightFlipper(this, 330, 634)\r\n    sideFlipper = new SideFlipper(this, 420, 295)\r\n\r\n    //Pop bumpers\r\n    // bumperA = new Bumper(this, 305, 100, 'bumperA')\r\n    // bumperB = new Bumper(this, 392, 95, 'bumperB')\r\n    // bumperC = new Bumper(this, 360, 149, 'bumperC')\r\n    \r\n    //Static Objects\r\n    /*********************************************************/\r\n    //StaticCustomShape(scene, x, y, path, collision group)\r\n    //StaticShape(scene, type, x, y, width, height, rotation, collision group)\r\n\r\n    //First level (collision group B)\r\n    new StaticCustomShape(this, 147, 200, 'topLoop', collisionGroupB).setScale(0.85, 0.9)\r\n    // new StaticCustomShape(this, 160, 168, 'leftRampRight', collisionGroupB)\r\n    // new StaticCustomShape(this, 378, 591, 'rightLane', collisionGroupB)\r\n    // new StaticCustomShape(this, 97, 591, 'leftLane', collisionGroupB)\r\n    // new StaticCustomShape(this, 369, 185, 'rightTrapCowl', collisionGroupB)\r\n    // new StaticCustomShape(this, 481, 455, 'farRightWall', collisionGroupB)\r\n    // new StaticCustomShape(this, 135, 222, 'leftRampLeft', collisionGroupB)\r\n    // new StaticCustomShape(this, 282, 112, 'rightRampLeft', collisionGroupB)\r\n    // new StaticCustomShape(this, 445, 530, 'rightWallA', collisionGroupB).setScale(1, 1.1)\r\n    // new StaticCustomShape(this, 431, 310, 'rightWallB', collisionGroupB)\r\n    // new StaticCustomShape(this, 250, 740, 'killZone', collisionGroupB)\r\n    // new StaticCustomShape(this, 120, 535, 'leftSlingshot', collisionGroupB)\r\n    // new StaticCustomShape(this, 355, 535, 'rightSlingshot', collisionGroupB)\r\n    // new StaticCustomShape(this, 342, 140, 'rightRampRight', collisionGroupB).setBounce(1)\r\n    // new StaticCustomShape(this, 40, 488, 'leftWall', collisionGroupB).setScale(1,1.1)\r\n    // new StaticCustomShape(this, 125, 110, 'leftLoopTop', collisionGroupB)\r\n    // new StaticCustomShape(this, 218, 90, 'midTargetLeft', collisionGroupB)\r\n    // new StaticCustomShape(this, 398, 392, 'rightTargets', collisionGroupB) \r\n    // new StaticShape(this, 'rectangle', 260, 197, 75, 15, .02, collisionGroupB) \r\n    // new StaticShape(this, 'rectangle', 156, 110, 90, 15, 1.45, collisionGroupB) \r\n    \r\n    //Small round rubbers\r\n    // new StaticShape(this, 'circle', 403, 482, 5, null, null, collisionGroupB) \r\n    // new StaticShape(this, 'circle', 72, 482, 5, null, null, collisionGroupB) \r\n    // new StaticShape(this, 'circle', 298, 73, 5, null, null, collisionGroupB) \r\n    // new StaticShape(this, 'circle', 405, 121, 5, null, null, collisionGroupB)  \r\n\r\n    //Medium round rubbers\r\n    // new StaticShape(this, 'circle', 236, 698, 6, null, null, collisionGroupB) // Center post\r\n    // new StaticShape(this, 'circle', 88, 421, 8, null, null, collisionGroupB) \r\n    // new StaticShape(this, 'circle', 140, 571, 8, null, null, collisionGroupB) //Slingshot corners\r\n    // new StaticShape(this, 'circle', 365, 487, 8, null, null, collisionGroupB) // \r\n    // new StaticShape(this, 'circle', 331, 570, 8, null, null, collisionGroupB) // \r\n    // new StaticShape(this, 'circle', 108, 487, 8, null, null, collisionGroupB) // \r\n    // new StaticShape(this, 'circle', 291, 38, 8, null, null, collisionGroupB)//Top tri-lane\r\n    // new StaticShape(this, 'circle', 325, 39, 8, null, null, collisionGroupB)//Top tri-lane\r\n    // new StaticShape(this, 'circle', 359, 37, 8, null, null, collisionGroupB)//Top tri-lane\r\n    // new StaticShape(this, 'circle', 392, 37, 8, null, null, collisionGroupB)//Top tri-lane\r\n    // new StaticShape(this, 'circle', 292, 59, 8, null, null, collisionGroupB)//Top tri-lane\r\n    // new StaticShape(this, 'circle', 326, 59, 8, null, null, collisionGroupB)//Top tri-lane\r\n    // new StaticShape(this, 'circle', 360, 58, 8, null, null, collisionGroupB)//Top tri-lane\r\n    // new StaticShape(this, 'circle', 394, 58, 8, null, null, collisionGroupB)//Top tri-lane\r\n\r\n    //Second level (collision group C)\r\n    // new StaticCustomShape(this, 45, 500, 'leftLaneBottomLeft', collisionGroupC) // Left Lane bottom L\r\n    // new StaticCustomShape(this, 92, 450, 'leftLaneBottomRight', collisionGroupC) // Left lane bottom R\r\n    // new StaticCustomShape(this, 150, 110, 'rightRampDivider', collisionGroupC) // Ramp divider\r\n    // new StaticCustomShape(this, 135, 7, 'leftRampTop', collisionGroupC) // Left ramp top\r\n    ////leftRampDiverter = new StaticCustomShape(this, 130, 10, 'leftRampDiverter', collisionGroupC)\r\n    // leftRampBottom = new StaticShape(this, 'circle', 128, 50, 25, null, null, collisionGroupC) // Left ramp bottom\r\n    // new StaticShape(this, 'circle', 365, 80, 50, null, null, collisionGroupC) //Right ramp bottom\r\n    // new StaticCustomShape(this, 345, 16, 'rightRampTop', collisionGroupC) // Right ramp top\r\n    // new StaticShape(this, 'rectangle', 55, 228, 15, 360, 0.095, collisionGroupC) // Left lane L\r\n    // new StaticShape(this, 'rectangle', 92, 228, 15, 360, 0.095, collisionGroupC) // Left lane R\r\n    // new StaticShape(this, 'rectangle', 100, 522, 15, 25, 1, collisionGroupC) // Left ramp termination\r\n    // new StaticShape(this, 'rectangle', 200, 72, 15, 150, -0.2, collisionGroupC) // Mid ramp right\r\n    // new StaticShape(this, 'rectangle', 275, 90, 15, 110, -0.2, collisionGroupC) // Right ramp left\r\n    // new StaticShape(this, 'rectangle', 325, 95, 15, 80, -0.2, collisionGroupC) // Right ramp right\r\n    // new StaticShape(this, 'rectangle', 422, 228, 15, 345, -0.095, collisionGroupC) // Right lane L\r\n    // new StaticShape(this, 'rectangle', 464, 228, 15, 360, -0.095, collisionGroupC) // Right lane R\r\n    // new StaticShape(this, 'rectangle', 401, 449, 140, 15, -1, collisionGroupC) // Right lane Bottom L\r\n    // new StaticShape(this, 'rectangle', 438, 469, 150, 15, -1, collisionGroupC) // Right lane Bottom R\r\n    // new StaticShape(this, 'rectangle', 376, 523, 15, 25, -1, collisionGroupC) // Right lane termination\r\n\r\n    \r\n\r\n    //Sensors \r\n\r\n    //Ramp on / off sensors\r\n    new Sensor(this, 180, 235, 1.6, 'ramp', 'leftRampOn', sensorGroupA)\r\n    new Sensor(this, 202, 212, -.1, 'ramp', 'centerRampOn', sensorGroupA)\r\n    new Sensor(this, 307, 208, -.1, 'ramp', 'rightRampOn', sensorGroupA)  \r\n    new Sensor(this, 103, 501, 0, 'ramp-off', 'leftRampOff', sensorGroupB)  \r\n    new Sensor(this, 371, 501, 0, 'ramp-off', 'rightRampOff', sensorGroupB)  \r\n\r\n\r\n\r\n    //Collision events\r\n    /*********************************************************/\r\n\r\n\r\n    this.matter.world.on('collisionstart', function(event, bodyA, bodyB){\r\n\r\n        //Sensors\r\n        if (bodyB.label === 'Ball' && bodyA.isSensor) {\r\n\r\n            //Toggles the balls isOnRamp state\r\n            if (bodyA.type === 'ramp') {\r\n                bodyB.isOnRamp = !bodyB.isOnRamp\r\n            } else if (bodyA.type === 'ramp-off') {\r\n                setTimeout(function(){\r\n                    bodyB.isOnRamp = !bodyB.isOnRamp\r\n                }, 50)\r\n            }\r\n        }\r\n        \r\n        //Slingshots\r\n        if (bodyB.label === 'Ball' && bodyA.label === 'Slingshot'){\r\n            slingshotA.fire()\r\n            slingshotB.fire()\r\n        }\r\n\r\n        //Pop bumpers\r\n        let canCallA = true\r\n        let canCallB = true\r\n        let canCallC = true\r\n        if ( bodyA.label === \"bumperA\" && bodyB.label  === 'Ball' && canCallA) {\r\n            canCallA = false\r\n            bumperA.fire(bodyB.position, \"bumperA\")\r\n            setTimeout(()=>{\r\n                canCallA = true\r\n            }, 100)\r\n        }\r\n        if ( bodyA.label === \"bumperB\" && bodyB.label  === 'Ball' && canCallB) {\r\n            canCallB = false\r\n            bumperB.fire(bodyB.position, \"bumperB\")\r\n            setTimeout(()=>{\r\n                canCallB = true\r\n            }, 100)\r\n        }\r\n        if ( bodyA.label === \"bumperC\" && bodyB.label  === 'Ball' && canCallC) {\r\n            canCallC = false\r\n            bumperC.fire(bodyB.position, \"bumperC\")\r\n            setTimeout(()=>{\r\n                canCallC = true\r\n            }, 100)\r\n        }\r\n    })\r\n}\r\n\r\nfunction update() {\r\n    \r\n    leftFlipper.hold()\r\n    rightFlipper.hold()\r\n    sideFlipper.hold()\r\n\r\n    \r\n    if(Phaser.Input.Keyboard.JustDown(spacebar)){\r\n        ball = new Ball(this, 416, 773, 'ball') \r\n        ball.launch()\r\n    }\r\n    \r\n    if (Phaser.Input.Keyboard.JustDown(left)){\r\n        leftFlipper.flip() \r\n        leftFlipper.isFlipping = true\r\n    } \r\n    \r\n    if (Phaser.Input.Keyboard.JustUp(left)){\r\n        leftFlipper.isFlipping = false\r\n        leftFlipper.release()\r\n    } \r\n\r\n    if (Phaser.Input.Keyboard.JustDown(right)){\r\n        rightFlipper.flip()\r\n        sideFlipper.flip()\r\n        rightFlipper.isFlipping = true\r\n        sideFlipper.isFlipping = true\r\n    } \r\n\r\n    if (Phaser.Input.Keyboard.JustUp(right)){\r\n        rightFlipper.isFlipping = false\r\n        sideFlipper.isFlipping = false\r\n        rightFlipper.release()\r\n        sideFlipper.release()\r\n    } \r\n} "],"file":"game.js"}