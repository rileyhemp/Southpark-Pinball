{"version":3,"sources":["ball.js"],"names":["Ball","scene","x","y","texture","matter","world","id","body","label","setupBall","update","isInMotion","currentScore","combo","friction","frictionAir","setDensity","setDepth","setCollisions","setCollisionCategory","collisionGroupA","isOnRamp","isOnCenterRamp","isOnLauncher","balls","push","sys","displayList","add","table_sfx","sound","loop","play","ramp_sfx","level","setCollidesWith","collisionGroupB","collisionGroupD","sensorGroupA","collisionGroupE","collisionGroupC","sensorGroupB","setVelocityX","setVelocityY","i","setInterval","isOnPlastic","volume","speed","isDestroyed","stop","angle","pop","playAudioSprite","destroy","clearInterval","Phaser","Physics","Matter","Image"],"mappings":"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","sourcesContent":["class Ball extends Phaser.Physics.Matter.Image \r\n{\r\n    constructor(scene, x, y, texture) \r\n    {\r\n        super(scene.matter.world, x, y, texture)\r\n        super.setScale(.8) \r\n        super.setCircle(8.75)\r\n        this.id = this.body.id\r\n        this.scene = scene\r\n        this.body.label = 'Ball'\r\n        this.setupBall()\r\n        this.update()\r\n        this.body.isInMotion = false\r\n        this.body.currentScore = 0\r\n        this.body.combo = 0\r\n    }\r\n\r\n    setupBall()\r\n    {\r\n        this.body.friction = 0\r\n        this.body.frictionAir = 0\r\n        this.setDensity(.001)\r\n        this.setDepth(1)\r\n        //Set what the ball can collide with\r\n        this.setCollisions('table')\r\n        //Set the ball's own collision category\r\n        this.setCollisionCategory(collisionGroupA)\r\n        //Initialize variables \r\n        this.body.isOnRamp = false\r\n        this.body.isOnCenterRamp = false\r\n        this.body.isOnLauncher = false\r\n        //Add ball to array\r\n        balls.push(this.body)\r\n        //Prevents the ball from spinning\r\n        // this.body.inertia = Infinity\r\n        //Add the ball to the display list\r\n        this.scene.sys.displayList.add(this)\r\n        //Add rolling table sounds\r\n        this.table_sfx = this.scene.sound.add('ball_rolling', { loop: true })\r\n        this.table_sfx.play() \r\n        //Add rolling ramp sounds\r\n        this.ramp_sfx = this.scene.sound.add('ramp_rolling', { loop: true })\r\n        this.ramp_sfx.play() \r\n    }\r\n\r\n    setCollisions(level)\r\n    { \r\n        //Changes what the ball can collide with depending on where it is\r\n        if ( level === 'table' ){\r\n            this.setCollidesWith([collisionGroupA, collisionGroupB, collisionGroupD, sensorGroupA])\r\n        } else if ( level === 'launcher' ) {\r\n            this.setCollidesWith([collisionGroupA, collisionGroupB, collisionGroupE, sensorGroupA])\r\n        } else if ( level === 'ramps' ){\r\n            this.setCollidesWith([collisionGroupA, collisionGroupC, collisionGroupE, sensorGroupB])\r\n        } else if ( level === 'centerRamp' ){\r\n            this.setCollidesWith([collisionGroupA, collisionGroupC, collisionGroupD, sensorGroupB])\r\n        }\r\n    }\r\n\r\n    readyBall()\r\n    {\r\n        //Loads a ball on the launcher\r\n        this.setVelocityX(0)\r\n        this.setVelocityY(0)\r\n        this.x = 455\r\n        this.y = 689\r\n    }\r\n\r\n    update()\r\n    {\r\n        //Watch for changes\r\n        let i = setInterval(()=>\r\n        {\r\n            //Changes sound when ball is on a ramp\r\n            if (this.body.isOnPlastic) \r\n            {\r\n                this.table_sfx.volume = 0\r\n                this.ramp_sfx.volume = .1\r\n            }\r\n            //Sets the volume of the ball rolling to the balls speed. \r\n            else\r\n            {\r\n                this.ramp_sfx.volume = 0\r\n                this.table_sfx.volume = this.body.speed/8.5\r\n            }\r\n            \r\n            //Kills the sound if the ball has been destroyed (by butters' target)\r\n            if (this.body.isDestroyed)\r\n            {\r\n                this.table_sfx.stop()\r\n                this.ramp_sfx.stop()\r\n            }\r\n\r\n            //Check balls location and adjusts collision groups accordingly\r\n            if (this.body.isOnRamp && this.body.isOnCenterRamp)\r\n            {\r\n                this.setCollisions('centerRamp')\r\n                this.setDepth(3)\r\n            } \r\n            else if (this.body.isOnRamp)\r\n            {\r\n                this.setCollisions('ramps')\r\n                this.setDepth(3)\r\n            } \r\n            else if (!this.body.isOnRamp && this.body.isOnLauncher)\r\n            {\r\n                this.setCollisions('launcher')\r\n                this.setDepth(2)\r\n            } \r\n            else \r\n            {\r\n                this.setCollisions('table')\r\n                this.setDepth(2)\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\t//Keeps the ball from spinning\r\n\t\t\t// this.body.angle = this.body.anglePrev\r\n\t\t\tthis.body.angle = 0\r\n\r\n\r\n            //Checks if the ball has escaped the map and puts it back on the launcher\r\n            // if (this.x < 0 || this.x > game.config.width || this.y < 0 || this.y > game.config.height)\r\n            // {\r\n            //     this.readyBall()\r\n            // }\r\n\r\n            //Checks if the ball is traveling at a certain speed. \r\n            //This is for registering missed / made shots and tracking combos. \r\n            //See collisions.js for the rest of the code. \r\n            this.body.speed > 12 ? this.body.isInMotion = true : null\r\n\r\n            //Check if the ball is in a killzone\r\n            if (this.x < 425 && (this.y > 650 && (this.x < 192 || this.x > 330)) || this.y > 720) \r\n            {\r\n                balls.pop()\r\n                this.scene.sound.playAudioSprite('sound_effects', 'Drain')\r\n                //playRandomSound('generic_negative', this.scene, 400)\r\n                this.table_sfx.stop()\r\n                this.ramp_sfx.stop()\r\n                this.destroy()\r\n                clearInterval(i)\r\n            }\r\n        }, 16.66666)\r\n    }\r\n}"],"file":"ball.js"}